// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())

  ingresos  Ingreso[]
  egresos   Egreso[]
  compras   Compra[]
  ventas    Venta[]
  servicios Servicio[]
  clientes  Cliente[]

  role     String     @default("user")
  Producto Producto[]

  Proveedor Proveedor[]

  Reporte Reporte[]

  Movimiento Movimiento[]

  CategoriaEgreso CategoriaEgreso[]

  CategoriaIngreso CategoriaIngreso[]
}

model Cliente {
  id        String  @id @default(cuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  nombre    String
  telefono  String?
  email     String?
  direccion String?

  ventas Venta[]

  createdAt DateTime @default(now())
}

model Ingreso {
  id                 String            @id @default(cuid())
  userId             String
  user               User              @relation(fields: [userId], references: [id])
  fecha              DateTime
  monto              Float
  descripcion        String?
  categoriaIngresoId String?
  categoriaIngreso   CategoriaIngreso? @relation(fields: [categoriaIngresoId], references: [id])
  createdAt          DateTime          @default(now())
}

model Egreso {
  id                String           @id @default(cuid())
  userId            String
  user              User             @relation(fields: [userId], references: [id])
  fecha             DateTime
  monto             Float
  categoria         String
  descripcion       String?
  categoriaEgresoId String?
  categoriaEgreso   CategoriaEgreso? @relation(fields: [categoriaEgresoId], references: [id])

  createdAt DateTime @default(now())
  compraId  String?
  Compra    Compra[]
}

model Producto {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  nombre      String
  descripcion String?
  precio      Float
  cantidad    Int
  activo      Boolean  @default(true)
  createdAt   DateTime @default(now())

  compras CompraProducto[]

  VentaProducto VentaProducto[]
}

model Compra {
  id          String     @id @default(cuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  proveedorId String?
  proveedor   Proveedor? @relation(fields: [proveedorId], references: [id])
  fecha       DateTime
  monto       Float
  descripcion String?

  createdAt DateTime @default(now())

  egresoId String? // ðŸ‘ˆ ID del egreso vinculado
  egreso   Egreso? @relation(fields: [egresoId], references: [id])

  productos CompraProducto[]
}

model CompraProducto {
  id             String   @id @default(cuid())
  compraId       String
  compra         Compra   @relation(fields: [compraId], references: [id])
  productoId     String
  producto       Producto @relation(fields: [productoId], references: [id])
  cantidad       Int
  precioUnitario Float

  createdAt DateTime @default(now())
}

model Proveedor {
  id          String  @id @default(cuid())
  userId      String
  user        User    @relation(fields: [userId], references: [id])
  nombre      String
  telefono    String?
  email       String?
  direccion   String?
  descripcion String?

  compras Compra[]

  createdAt DateTime @default(now())
}

model Venta {
  id        String          @id @default(cuid())
  userId    String
  user      User            @relation(fields: [userId], references: [id])
  clienteId String?
  cliente   Cliente?        @relation(fields: [clienteId], references: [id])
  fecha     DateTime
  monto     Float
  servicios VentaServicio[]
  tipo      String

  createdAt DateTime @default(now())

  VentaProducto VentaProducto[]
}

model VentaProducto {
  id         String   @id @default(cuid())
  ventaId    String
  venta      Venta    @relation(fields: [ventaId], references: [id])
  productoId String
  producto   Producto @relation(fields: [productoId], references: [id])
  cantidad   Int
  precio     Float

  createdAt DateTime @default(now())
}

model Servicio {
  id          String  @id @default(cuid())
  userId      String
  user        User    @relation(fields: [userId], references: [id])
  nombre      String
  descripcion String?
  precioBase  Float?

  ventas    VentaServicio[]
  createdAt DateTime        @default(now())
}

model VentaServicio {
  id         String   @id @default(cuid())
  ventaId    String
  venta      Venta    @relation(fields: [ventaId], references: [id])
  servicioId String
  servicio   Servicio @relation(fields: [servicioId], references: [id])
  cantidad   Int      @default(1)
  precio     Float // precio usado en esta venta
}

model Movimiento {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  tipo        String // "Ingreso", "Egreso", "Venta", "Compra"
  fecha       DateTime
  monto       Float
  descripcion String?

  createdAt DateTime @default(now())
}

model Reporte {
  id     String   @id @default(cuid())
  userId String
  user   User     @relation(fields: [userId], references: [id])
  tipo   String // "Mensual", "Anual", "Personalizado"
  desde  DateTime
  hasta  DateTime
  url    String? // Link a PDF generado, si se aplica

  creadoEn DateTime @default(now())
}

model CategoriaIngreso {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])
  nombre String
  tipo   String // "Ingreso", "Egreso", "Producto", etc.

  createdAt DateTime @default(now())

  Ingreso Ingreso[]
}

model CategoriaEgreso {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])
  nombre String
  tipo   String // "Ingreso", "Egreso", "Producto", etc.

  createdAt DateTime @default(now())

  Egreso Egreso[]
}
